#############################################################################################################################################
# Program ID       : Scala Contents
#
# Created By Esak
# Created On 17-OCT-17
# Property File For Changing Name for Type B Files
#  Date          Amended By                    Changes/Remarks
# ========   ================           ============================
# 18 Oct 2017  Esakki Thangappa Pillai      Remove Duplicate Properties
###############################################################################################################################################
Lesson 1 
        1.a) Prepare Development Env , 
        1.b)Scala WorkSheet ,Values Varaibales  
        1.c) Functions Methods Scala Docs 

Lesson 2
  Understand Conditional And Block Experssion 
            2.a) if Statemnt And Unit, Data Type- Any , Value of Block 
            2.b) While Loop and foreach And For Compression  for(i <- 1 to n ) Works with Any Collection for( c <- 'HELLO') 
                if Statements in For Loop  Collecting Results 
            2.c) Functions 
            2.d) Named And Default Arguments ,, Varags  :_* Means Consider this as Sequence of Something so sum( 1 to 10 :_*)

Lesson 3 Arrays Maps Tuples 
          3.a)
        
Lesson 4
Lesson 5
Lesson 6
Lesson 7


Functions Wont Operate On Objects ,  def abs(x:Double)= if(x>0) x else -x here return type is infered how is that basically x is double and expressions returns a Double 
Recursive Function should declare the Return Value Type  
= equals Sign in Functions

Class Functions 
1) Box Function 
2) Factorial Function   Normal Way , Recursive Way 
3) Decorative Function 
4) Sum Function 






Variables And Types 
String Interpolation 
Escape Characters
Type Inference
IF ELSE how to use a simple if , if else statement and how to asign the if else results to a variable 
For Loop - 
	use for Comprehension to loop from 1 to 5 , 1 less than 5 , use if statemnets in for loop 
	iterate a List 
	Create and use for compreshension for looping 2 dimensional Arrays 
Range 
	Create Inclusive Range Of Integers 
	Create a Range of Integers Which excludes the Upper bound 
	Create a Range With with Different Increment 
	Create a Range from a - z
	Convert our Ranges into set List seq 
While DoWhile
PatternMatching
	use pattern Matching and Return the Results to a Variable 
	use pattern Matching with Wild Character and two or More Items on the same Condition 
	use pattern Matching by type 
	use pattern Matching with If clauses
	
https://kerflyn.wordpress.com/2011/02/14/playing-with-scalas-pattern-matching/

Tuples
	create a Tuple and access its values
	use pattern Matching in Tuples

Option 
	Use Option and None and Some

Class And Type Hierarchy

Functions 
		Intro
		Functions With Parameters  
			create a Function Called "CalculateDonutCost" which is having the Following Parameter DonutName quantity  where one Donut is 2.50
			Modify the Above Function and add default Parameter for Coupon Code.And Call The Function.
		Functions with Option Return Type 
			Create Function "dailyCouponCode" and It should Return Option[String]
			Call the Above Function USing Pattern Matching 
			ReCreate The CalculateDonutCost Function With CouponCode Paramater
		Functions With Implicit Parameters 
			
		Implicit Parameter
		Typed Functions 
		Polymorphic Functions with Generic Return Type 
		Variable Argument Function
		Functions AS Symbols
		Function Currying With Parameter Groups 
		Higher Order Functions
		Higher Order Functions call BY Name 
		Higher Order Functions call Back Parameter
		Function Using val 
		Function Composition Using And Then 
		Function Composition Using Compose
		Tail Recursive Functions - @annoatation 
		Tail Recursive Functions - TailCalls._
		Trampoline Tail REcursive Functions 
		Partial Function Using Trait 
		Nested Function 
